What is GraphQL?
GraphQL is a new API standard that provides a more efficient, powerful and flexible alternative to REST.

At its core, GraphQL enables declarative data fetching (moves away from an imperative data fetching approach) where a client can specify 
exactly what data it needs from an API. Instead of multiple endpoints that return fixed data structures, a GraphQL server only exposes a 
single endpoint and responds with precisely the data a client asked for.

GraphQL is a query language for APIs - not databases. It addresses some major factors that have been challenging the way APIs are designed:

1. Increased mobile usage creates need for efficient data loading

GraphQL minimizes the amount of data that needs to be transferred over the network and thus majorly improves applications operating under 
these conditions.

2. Variety of different frontend frameworks and platforms

The heterogeneous landscape of frontend frameworks and platforms that run client applications makes it difficult to build and maintain 
one API that would fit the requirements of all. With GraphQL, each client can access precisely the data it needs.

3. Fast development & expectation for rapid feature development

With REST APIs, the way data is exposed by the server often needs to be modified to account for specific requirements and design changes on 
the client-side. This hinders fast development practices and product iterations.

4. Rapid API evolution and versioning

 REST APIs have shown to be too inflexible to keep up with the rapidly changing requirements of the clients that access them. GraphQL APIs 
 typically only expose a single endpoint. This works because the structure of the data that’s returned is not fixed. Instead, it’s completely 
 flexible and lets the client decide what data is actually needed.
 
 5. Stability of Client/Server contract
 
 GraphQL uses a strong type system to define the capabilities of an API. All the types that are exposed in an API are written down in a schema 
 using the GraphQL Schema Definition Language (SDL). This schema serves as the contract between the client and the server to define how a client 
 can access the data.

What is a GraphQL server?
The software component that parses, validates and executes GraphQL queries/mutations.

Schema core concepts

A schema specifies the capabilities of the API and defines how clients can request the data. It is often seen as a contract between the server 
and client. 

1. Schema Definition Language (SDL)

GraphQL has its own type system that’s used to define the schema (components) of an API. The syntax for writing schemas is called 
Schema Definition Language (SDL).

2. Type

Representation of an entity object

type Post {
  title: String!
  author: Person!
}

type Person {
  id: ID!
  name: String!
  age: Int!
  posts: [Post!]!
}

3. Query

Information sent by a client expressing the data it needs

{
  allPersons(last: 2) {
    name
  }
}

Example response

{
  "allPersons": [
    { "name": "Johnny" },
    { "name": "Sarah" }
  ]
}

4. Mutations

Information sent by a client describing the changes to be made on data stored in the backend. 

mutation {
  createPerson(name: "Bob", age: 36) {
    name
    age
  }
}

Example response

"createPerson": {
  "name": "Bob",
  "age": 36,
}

5. Subscription

A steady connection to the server initiated and held by a client to which the server pushes the corresponding data
when a particular event occurs

subscription {
  newPerson {
    name
    age
  }
}

Example response - whenever a mutation is performed that creates a new Person

{
  "newPerson": {
    "name": "Jane",
    "age": 23
  }
}

Generally, a schema is simply a collection of GraphQL types. However, when writing the schema for an API, there are some special root types:

type Query { ... }
type Mutation { ... }
type Subscription { ... }

The Query, Mutation, and Subscription types are the entry points for the requests sent by the client. 
